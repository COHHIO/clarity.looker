% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clarity_api_r6.R
\name{clarity_api}
\alias{clarity_api}
\title{Call HUD Export Items & Extras from the Clarity Looker API}
\arguments{
\item{...}{
  Arguments passed on to \code{\link[readr:read_delim]{readr::read_csv}}
  \describe{
    \item{\code{file}}{Either a path to a file, a connection, or literal data
(either a single string or a raw vector).

Files ending in \code{.gz}, \code{.bz2}, \code{.xz}, or \code{.zip} will
be automatically uncompressed. Files starting with \verb{http://},
\verb{https://}, \verb{ftp://}, or \verb{ftps://} will be automatically
downloaded. Remote gz files can also be automatically downloaded and
decompressed.

Literal data is most useful for examples and tests. To be recognised as a
path, it must be wrapped with \code{I()}, be a string containing at least one
new line, or be a vector containing at least one string with a new line.

Using a value of \code{\link[readr:clipboard]{clipboard()}} will read from the system clipboard.}
    \item{\code{quote}}{Single character used to quote strings.}
    \item{\code{col_names}}{Either \code{TRUE}, \code{FALSE} or a character vector
of column names.

If \code{TRUE}, the first row of the input will be used as the column
names, and will not be included in the data frame. If \code{FALSE}, column
names will be generated automatically: X1, X2, X3 etc.

If \code{col_names} is a character vector, the values will be used as the
names of the columns, and the first row of the input will be read into
the first row of the output data frame.

Missing (\code{NA}) column names will generate a warning, and be filled
in with dummy names \code{X1}, \code{X2} etc. Duplicate column names
will generate a warning and be made unique, see \code{name_repair} to control
how this is done.}
    \item{\code{col_types}}{One of \code{NULL}, a \code{\link[readr:cols]{cols()}} specification, or
a string. See \code{vignette("readr")} for more details.

If \code{NULL}, all column types will be imputed from the first 1000 rows
on the input. This is convenient (and fast), but not robust. If the
imputation fails, you'll need to increase the \code{guess_max} or supply the
correct types yourself.

Column specifications created by \code{\link[=list]{list()}} or \code{\link[readr:cols]{cols()}} must contain
one column specification for each column. If you only want to read a
subset of the columns, use \code{\link[readr:cols]{cols_only()}}.

Alternatively, you can use a compact string representation where each
character represents one column:
\itemize{
\item c = character
\item i = integer
\item n = number
\item d = double
\item l = logical
\item f = factor
\item D = date
\item T = date time
\item t = time
\item ? = guess
\item _ or - = skip

By default, reading a file without a column specification will print a
message showing what \code{readr} guessed they were. To remove this message,
set \code{show_col_types = FALSE} or set `options(readr.show_col_types = FALSE).
}}
    \item{\code{col_select}}{<\code{\link[tidyselect:language]{tidy-select}}> Columns to include
in the results, either by name or by numeric index. Use \code{\link[=c]{c()}} or \code{\link[=list]{list()}}
to select with more than one expression and \code{\link[tidyselect:language]{?tidyselect::language}} for full
details on the selection language.}
    \item{\code{id}}{The name of a column in which to store the file path. This is
useful when reading multiple input files and there is data in the file
paths, such as the data collection date. If \code{NULL} (the default) no extra
column is created.}
    \item{\code{locale}}{The locale controls defaults that vary from place to place.
The default locale is US-centric (like R), but you can use
\code{\link[readr:locale]{locale()}} to create your own locale that controls things like
the default time zone, encoding, decimal mark, big mark, and day/month
names.}
    \item{\code{na}}{Character vector of strings to interpret as missing values. Set this
option to \code{character()} to indicate no missing values.}
    \item{\code{quoted_na}}{Should missing values inside quotes be treated as missing
values (the default) or strings.}
    \item{\code{comment}}{A string used to identify comments. Any text after the
comment characters will be silently ignored.}
    \item{\code{trim_ws}}{Should leading and trailing whitespace (ASCII spaces and tabs) be trimmed from
each field before parsing it?}
    \item{\code{skip}}{Number of lines to skip before reading data. If \code{comment} is
supplied any commented lines are ignored \emph{after} skipping.}
    \item{\code{n_max}}{Maximum number of lines to read.}
    \item{\code{guess_max}}{Maximum number of lines to use for guessing column types.}
    \item{\code{name_repair}}{Treatment of problematic column names:
\itemize{
\item \code{"minimal"}: No name repair or checks, beyond basic existence of names
\item \code{"unique"}: Make sure names are unique and not empty
\item \code{"check_unique"}: (default value), no name repair, but check they are
\code{unique}
\item \code{"universal"}: Make the names \code{unique} and syntactic
\item a function: apply custom name repair (e.g., \code{.name_repair = make.names}
for names in the style of base R)
\item A purrr-style anonymous function, see \code{\link[rlang:as_function]{rlang::as_function()}}
}

This argument is passed on as \code{repair} to \code{\link[vctrs:vec_as_names]{vctrs::vec_as_names()}}.
See there for more details on these terms and the strategies used
to enforce them.}
    \item{\code{num_threads}}{The number of processing threads to use for initial
parsing and lazy reading of data. If your data contains newlines within
fields the parser should automatically detect this and fall back to using
one thread only. However if you know your file has newlines within quoted
fields it is safest to set \code{num_threads = 1} explicitly.}
    \item{\code{progress}}{Display a progress bar? By default it will only display
in an interactive session and not while knitting a document. The automatic
progress bar can be disabled by setting option \code{readr.show_progress} to
\code{FALSE}.}
    \item{\code{show_col_types}}{If \code{FALSE}, do not show the guessed column types. If
\code{TRUE} always show the column types, even if they are supplied. If \code{NULL}
(the default) only show the column types if they are not explicitly supplied
by the \code{col_types} argument.}
    \item{\code{skip_empty_rows}}{Should blank rows be ignored altogether? i.e. If this
option is \code{TRUE} then blank rows will not be represented at all.  If it is
\code{FALSE} then they will be represented by \code{NA} values in all the columns.}
    \item{\code{lazy}}{Read values lazily? By default the file is initially only
indexed and the values are read lazily when accessed. Lazy reading is
useful interactively, particularly if you are only interested in a subset
of the full dataset. Note, lazy reading on windows will lock the file
until all the data has been read from it, if you run into this issue set
\code{lazy = FALSE}.}
  }}
}
\description{
Calls the Clarity Looker API HUD CSV Export  (BETA) & LookML models to return to the HUD Export Items & other datasets on various time ranges via pre-constructed Looks. See \code{?call_data} for details on using all data methods.
}
\details{
Methods for calling Export items and all looks contained within specified folders are dynamically added on initialization.
}
\section{Export_Items}{

Available HUD Export Items are
\itemize{
\item{Affiliation}
\item{Assessment}
\item{AssessmentQuestions}
\item{AssessmentResults}
\item{Client}
\item{CurrentLivingSituation}
\item{Disabilities}
\item{EmploymentEducation}
\item{Enrollment}
\item{EnrollmentCoC}
\item{Event}
\item{Exit}
\item{Export}
\item{Funder}
\item{HealthAndDV}
\item{IncomeBenefits}
\item{Inventory}
\item{Organization}
\item{Project}
\item{ProjectCoC}
\item{Services}
\item{User}
\item{YouthEducationStatus}
}
}

\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{folders}}{\code{{lookr}} folder data stored here}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{clarity_api$new()}}
\item \href{#method-get_export}{\code{clarity_api$get_export()}}
\item \href{#method-get_folder_looks}{\code{clarity_api$get_folder_looks()}}
\item \href{#method-finalize}{\code{clarity_api$finalize()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
initialize the Looker API connection given the path to the ini configuration file.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{clarity_api$new(
  configFile,
  export_folder = "HUD Export",
  daily_folder = 9711,
  look_folders = "HUD Extras",
  dirs = list(export = "data/export", public = "data/public", spm = "data/spm", extras
    = "data/extras")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{configFile}}{\code{(character)} Path to the Looker \emph{.ini} configuration file. Only the directory path is needed if the file is entitled \emph{Looker.ini}}

\item{\code{export_folder}}{\code{(character/numeric)} Name of numeric ID of the folder containing Export looks. \emph{Folder names should only contain letters, numbers, underscores or periods.}}

\item{\code{daily_folder}}{\code{(character/numeric)} Name of numeric ID of the folder containing Export look data added or modified in the past 24 hours (12a-12p)}

\item{\code{look_folders}}{\code{(character/numeric)} list of names or numeric IDs of the additional folders containing relevant looks.}

\item{\code{dirs}}{\code{(named list)} of default directory paths for where to store the feather files for the following data types:
\itemize{
\item{\code{export}}{ The HUD Export items \strong{Default}: \emph{data/export}}
\item{\code{public}}{ The public items \strong{Default}: \emph{data/public}}
\item{\code{spm}}{ The SPM items \strong{Default}: \emph{data/spm}}
\item{\code{extras}}{ The HUD Extras (custom items) \strong{Default}: \emph{data/extras}}
}
This is optional and the path can be provided to individual methods as needed.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_export"></a>}}
\if{latex}{\out{\hypertarget{method-get_export}{}}}
\subsection{Method \code{get_export()}}{
Pull all Export items with associate Looks
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{clarity_api$get_export(
  path = self$dirs$export,
  .write = TRUE,
  skip = c("Assessment", "AssessmentQuestions", "AssessmentResults", "Services",
    "YouthEducationStatus")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{path}}{\code{(character)} The directory path from which to load stored data}

\item{\code{.write}}{\code{(logical)} Whether to write data as feather file to \code{path}}

\item{\code{skip}}{\code{(character)} of Look titles to skip}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_folder_looks"></a>}}
\if{latex}{\out{\hypertarget{method-get_folder_looks}{}}}
\subsection{Method \code{get_folder_looks()}}{
Pull all Looks associated with a folder
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{clarity_api$get_folder_looks(
  folder,
  details = FALSE,
  .write = FALSE,
  path,
  skip
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{folder}}{\code{(folder)} Folder object from \code{folders} field}

\item{\code{details}}{\code{(logical)} Return look info. See \href{https://docs.looker.com/reference/api-and-integration/api-reference/v3.1/look#get_look}{getLook}}

\item{\code{.write}}{\code{(logical)} Whether to write data as feather file to \code{path}}

\item{\code{path}}{\code{(character)} The directory path from which to load stored data}

\item{\code{skip}}{\code{(character)} of Look titles to skip}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-finalize"></a>}}
\if{latex}{\out{\hypertarget{method-finalize}{}}}
\subsection{Method \code{finalize()}}{
Close the Looker API Connection
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{clarity_api$finalize()}\if{html}{\out{</div>}}
}

}
}
